// Time Complexity : Approach1 O(N), Approach2 O(1) Amortized
// Space Complexity : Approach1 O(N), Approach2 O(N)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
// Approach1
class MyQueue {
    public Stack<Integer> stack1;
    public Stack<Integer> stack2;
    public MyQueue() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }
    
    public void push(int x) {
        if(stack1.empty())
            stack1.push(x);
        else
        {
            while(!stack1.empty())
                stack2.push(stack1.pop());
            stack1.push(x);
            while(!stack2.empty())
                stack1.push(stack2.pop());            
        }
    }   
    public int pop() {
        return stack1.pop();    
    }
    
    public int peek() {
        return stack1.peek();
    }
    
    public boolean empty() {
        return stack1.empty();
    }
}
//Approach 2
//better solution 
class MyQueue {
    public Stack<Integer> stack1;
    public Stack<Integer> stack2;
    public MyQueue() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }
    public void push(int x) {
        stack1.push(x);
    }
    
    public int pop() {
        if(stack2.empty())
        {
            while(!stack1.empty())
                stack2.push(stack1.pop());
        }
        return stack2.pop();
    }
    public int peek() {
        if(stack2.empty())
        {
            while(!stack1.empty())
                stack2.push(stack1.pop());
        }
        return stack2.peek();
    }
    
    public boolean empty() {
        return stack2.empty()&&stack1.empty();
    }
}



